<Program> ::= <FunctionDecl> <Program> | <TypeDecl> <Program> | <VarDecl> <Program> | <FunctionDecl>
<TypeDecl> ::= typedef struct { <Type> <IdList> ; <VarDecl> } ID ; <TypeDecl> | epsilon
<VarDecl> ::= <Type> <IdList> ; <VarDecl> | epsilon
<IdList> ::= <Pointer> ID <Array> | <IdList> , <Pointer> ID <Array>
<Pointer> ::= * | epsilon
<Array> ::= [ NUM ] <Array> | epsilon
<FunctionDecl> ::= <Type> <Pointer> ID ( <FormalList> ) { <VarDecl> <StmtList> }
<FormalList> ::= <Type> <Pointer> ID <Array> <FormalRest> | epsilon
<FormalRest> ::= , <Type> <Pointer> ID <Array> <FormalRest> | epsilon
<Type> ::= long | int | float | bool | ID | char | double
<StmtList> ::= <Stmt> | <Stmt> <StmtList>
<Stmt> ::= if ( <Expr> ) <Stmt> else <Stmt> | while ( <Expr> ) <Stmt> | switch( <Expr> ) { <CaseBlock> } | break ; | print ( <ExprList> ) ; | readln ( <Expr> ) ; | return <Expr> ; | throw ; | { <StmtList> } | ID ( <ExprList> ) ; | try <Stmt> catch ( "â€¦" ) <Stmt> | <Expr> ;
<CaseBlock> ::= case NUM ":" <StmtList> <CaseBlock> | case NUM ":" <CaseBlock>
<ExprList> ::= epsilon | <ExprListTail>
<ExprListTail> ::= <Expr> | <Expr> , <ExprListTail>
<Expr> ::= <Expr> = <Expr> | <ExprBin>
<ExprBin> ::= <Expr> "||" <Expr> | <ExprBin>
<ExprBin1> ::= <Expr> "&&" <Expr> | <ExprBin2>
<ExprBin2> ::= <Expr> "==" <Expr> | <Expr> "!=" <Expr> | <ExprBin3>
<ExprBin3> ::= <Expr> "<" <Expr> | <Expr> "<=" <Expr> | <Expr> ">=" <Expr> | <Expr> ">" <Expr> | <ExprBin4>
<ExprBin4> ::= <Expr> "+" <Expr> | <Expr> "-" <Expr> | <Expr> "|" <Expr> | <ExprBin5>
<ExprBin5> ::= <Expr> <BinOp> <Expr> | <ExprUn>
<BinOp> ::=  "*" | "/" | "%" | "&"
<ExprUn> ::= <UnaryOp> <Expr>
<UnaryOp> ::= "-" | "!" | "+"
<ExprPrim> ::= ( <Expr> ) | ID ( <ExprList> ) | <Primary>
<Primary> ::= ID | NUM | LITERAL | ' ASCII ' | <Expr> "." ID | <Expr> "->" ID | <Expr> [ <Expr> ] | "&" <Expr> | "*" <Expr> | true | false