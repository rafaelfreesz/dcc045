<Program> ::= <FunctionDecl> <Program> | <TypeDecl> <Program> | <VarDecl> <Program> | <FunctionDecl>
<FunctionDecl> ::= <Type> <Pointer> ID ( <FormalList> ) { <VarDecl> <StmtList> }
<Stmt> ::= if ( <Expr> ) <Stmt> else <Stmt> | while ( <Expr> ) <Stmt> | switch ( <Expr> ) { <CaseBlock> } | break ; | print ( <ExprList> ) ; | readln ( <Expr> ) ; | return <Expr> ; | throw ; | { <StmtList> } | ID ( <ExprList> ) ; | try <Stmt> catch ( ) <Stmt> | <Expr> ;
<StmtList> ::= <Stmt> | <Stmt> <StmtList>
<CaseBlock> ::= case NUM ":" <StmtList> <CaseBlock> | case NUM ":" <StmtList>



<Expr> ::= <ExprBin> <Expr_l>
<Expr_l> ::= "=" <Expr> <Expr_l> | epsilon
<ExprBin> ::= <ExprBin1> <ExprBin_l>
<ExprBin_l> ::= <Expr_l> "||" <Expr> <ExprBin_l> | epsilon
<ExprBin1> ::= <ExprBin2> <ExprBin1_l>
<ExprBin1_l> ::= <ExprBin_l> <Expr_l> "&&" <Expr> <ExprBin1_l> | epsilon
<ExprBin2> ::= <ExprBin3> <ExprBin2_l>
<ExprBin2_l> ::= <ExprBin1> <ExprBin1_l> <Expr_l> "==" <Expr> <ExprBin2_l> | <ExprBin1> <ExprBin1_l> <Expr_l> "!=" <Expr> <ExprBin2_l> | epsilon
<ExprBin3> ::= <ExprBin4> <ExprBin3_l>
<ExprBin3_l> ::= <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> "<" <Expr> <ExprBin3_l> | <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> "<=" <Expr> <ExprBin3_l> | <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> ">=" <Expr> <ExprBin3_l> | <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> ">" <Expr> <ExprBin3_l> | epsilon
<ExprBin4> ::= <ExprBin5> <ExprBin4_l>
<ExprBin4_l> ::= <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> "+" <Expr> <ExprBin4_l> | <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> "-" <Expr> <ExprBin4_l> | <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> "|" <Expr> <ExprBin4_l> | epsilon
<ExprBin5> ::= <ExprUn> <ExprBin5_l>
<ExprBin5_l> ::= <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> <BinOp> <Expr> <ExprBin5_l> | epsilon
<ExprUn> ::= <UnaryOp> <Expr> | <ExprPrim>
<ExprPrim> ::= ( <Expr> ) | ID ( <ExprList> ) | <Primary>
<Primary> ::= ID <Primary_l> | NUM <Primary_l> | LITERAL <Primary_l> | 'ASCII' <Primary_l> | <UnaryOp> <Expr> <ExprBin5_l> <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> "." ID <Primary_l> | ( <Expr> ) <ExprBin5_l> <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> "." ID <Primary_l> | ID ( <ExprList> ) <ExprBin5_l> <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> "." ID <Primary_l> | <UnaryOp> <Expr> <ExprBin5_l> <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> "->" ID <Primary_l> | ( <Expr> ) <ExprBin5_l> <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> "->" ID <Primary_l> | ID ( <ExprList> ) <ExprBin5_l> <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> "->" ID <Primary_l> | <UnaryOp> <Expr> <ExprBin5_l> <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> [ <Expr> ] <Primary_l> | ( <Expr> ) <ExprBin5_l> <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> [ <Expr> ] <Primary_l> | ID ( <ExprList> ) <ExprBin5_l> <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> [ <Expr> ] <Primary_l> | "&" <Expr> <Primary_l> | "*" <Expr> <Primary_l> | true <Primary_l> | false <Primary_l>
<Primary_l> ::=  <ExprBin5_l> <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> . ID <Primary_l> |  <ExprBin5_l> <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> "->" ID <Primary_l> |  <ExprBin5_l> <ExprBin4_l> <ExprBin3_l> <ExprBin2_l> <ExprBin1_l> <ExprBin_l> <Expr_l> [ <Expr> ] <Primary_l> | epsilon
<ExprList> ::= <ExprListTail> | epsilon
<ExprListTail> ::= <Expr> | <Expr> , <ExprListTail>
<FormalList> ::= <Type> <Pointer> ID <Array> <FormalRest> | epsilon
<FormalRest> ::= , <Type> <Pointer> ID <Array> <FormalRest> | epsilon
<TypeDecl> ::= typedef struct { <Type> <IdList> ; <VarDecl> } ID ; <TypeDecl> | epsilon
<VarDecl> ::= <Type> <IdList> ; <VarDecl> | epsilon
<IdList> ::= <Pointer> ID <Array> <IdList_l>
<IdList_l> ::= , <Pointer> ID <Array> <IdList_l> | epsilon
<Array> ::= [ NUM ] <Array> | epsilon
<UnaryOp> ::= "-" | "!" | "+"
<BinOp> ::= "*" | "/" | "%" | "&"
<Pointer> ::= * | epsilon
<Type> ::= long | int | float | bool | ID | char | double




