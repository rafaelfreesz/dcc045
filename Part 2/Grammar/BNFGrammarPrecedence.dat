<Program> ::= <FunctionDecl> <Program> | <TypeDecl> <Program> | <VarDecl> <Program> | <FunctionDecl>
<TypeDecl> ::= typedef struct { <Type> <IdList> ; <VarDecl> } ID ; <TypeDecl> | epsilon
<VarDecl> ::= <Type> <IdList> ; <VarDecl> | epsilon
<IdList> ::= <Pointer> ID <Array> | <IdList> , <Pointer> ID <Array>
<Pointer> ::= * | epsilon
<Array> ::= [ NUM ] <Array> | epsilon
<FunctionDecl> ::= <Type> <Pointer> ID ( <FormalList> ) { <VarDecl> <StmtList> }
<FormalList> ::= <Type> <Pointer> ID <Array> <FormalRest> | epsilon
<FormalRest> ::= , <Type> <Pointer> ID <Array> <FormalRest> | epsilon
<Type> ::= long | int | float | bool | ID | char | double
<StmtList> ::= <Stmt> | <Stmt> <StmtList>
<Stmt> ::= if ( <Expr> ) <Stmt> else <Stmt> | while ( <Expr> ) <Stmt> | switch ( <Expr> ) { <CaseBlock> } | break ; | print ( <ExprList> ) ; | readln ( <Expr> ) ; | return <Expr> ; | throw ; | { <StmtList> } | ID ( <ExprList> ) ; | try <Stmt> catch ( ) <Stmt> | <Expr> ;
<CaseBlock> ::= case NUM ":" <StmtList> <CaseBlock> | case NUM ":" <CaseBlock>
<ExprList> ::= epsilon | <ExprListTail>
<ExprListTail> ::= <Expr> | <Expr> , <ExprListTail>


<Expr> ::= <ExprBin> <Expr_l>
<Expr_l> ::= = <ExprBin> <Expr_l> | epsilon
<ExprBin> ::= <ExprBin1> <ExprBin_l>
<ExprBin_l> ::= "||" <ExprBin1> <Expr_l> | epsilon
<ExprBin1> ::= <ExprBin2> <ExprBin1_l>
<ExprBin1_l> ::= "&&" <ExprBin2> <ExprBin1_l> | epsilon
<ExprBin2> ::= <ExprBin3> <ExprBin2_l>
<ExprBin2_l> ::= "==" <ExprBin3> <ExprBin2_l> | "!=" <ExprBin3> <ExprBin2_l> | epsilon
<ExprBin3> ::= <ExprBin4> <ExprBin3_l>
<ExprBin3_l> ::= "<" <ExprBin4> <ExprBin3_l> | "<=" <ExprBin4> <ExprBin3_l> | ">=" <ExprBin4> <ExprBin3_l> | ">" <ExprBin4> <ExprBin3_l> | epsilon
<ExprBin4> ::= <ExprBin5> <ExprBin4_l>
<ExprBin4_l> ::= "+" <ExprBin5> <ExprBin4_l> | "-" <ExprBin5> <ExprBin4_l> | "|" <ExprBin5> <ExprBin4_l> | epsilon
<ExprBin5> ::= <ExprUn> <ExprBin5_l>
<ExprBin5_l> ::= <BinOp> <ExprUn> <ExprBin5_l> | epsilon
<ExprUn> ::= <ExprPrim> <ExprUn_l>
<ExprUn_l> ::= <UnaryOp> <ExprPrim> <ExprUn_l> | epsilon
<ExprPrim> ::= <Primary> <ExprPrim_l>
<ExprPrim_l> ::= ( <Expr> ) <Primary> <ExprPrim_l> | epsilon
<Primary> ::= ID | NUM | LITERAL | 'ASCII' | ID ( <ExprList> ) | "&" <Expr> | "*" <Expr> | true | false | <Expr> <Primary_l>
<Primary_l> ::= "." ID <Expr> <Primary_l> | "->" ID <Expr> <Primary_l> | [ <Expr> ] <Expr> <Primary_l> | epsilon


<UnaryOp> ::= "-" | "!" | "+"
<BinOp> ::= "*" | "/" | "%" | "&"